"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


ENV_PATH = BASE_DIR.parent / '.env'

env = environ.Env()

# Try to load .env file silently - don't error if not found
try:
	# Check multiple possible locations
	env_paths = [
		ENV_PATH,  # /app/.env (Docker)
		BASE_DIR / '.env',  # /app/src/.env
		Path('/app/.env'),  # Explicit Docker path
	]

	for path in env_paths:
		if path.exists():
			environ.Env.read_env(path)
			break
except Exception:
	# Environment variables will come from Docker Compose
	pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
	'daphne',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	# Third-party apps
	'channels',
	'guardian',
	'corsheaders',
	'procrastinate.contrib.django',
	# Local apps
	'common.apps.CommonConfig',
	'accounts.apps.AccountsConfig',
	'otp.apps.OtpConfig',
	'tokens.apps.TokensConfig',
	'notifications.apps.NotificationsConfig',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'whitenoise.middleware.WhiteNoiseMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [BASE_DIR / 'templates'],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': env('POSTGRES_DB'),
		'USER': env('POSTGRES_USER'),
		'PASSWORD': env('POSTGRES_PASSWORD'),
		'HOST': env('POSTGRES_HOST'),
	}
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'bucket' / 'staticfiles'
STATICFILES_DIRS = [
		BASE_DIR / 'static',
	]


MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'bucket' / 'media'

STORAGES = {
	'default': {
		'BACKEND': 'django.core.files.storage.FileSystemStorage',
	},
	'staticfiles': {
		'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
	},
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Auth Backends
AUTHENTICATION_BACKENDS = [
	'django.contrib.auth.backends.ModelBackend',
	'guardian.backends.ObjectPermissionBackend',
]

# JWT settings
JWT_REFRESH_TOKEN_LIFETIME = timedelta(days=env.int('JWT_REFRESH_TOKEN_LIFETIME'))
JWT_ACCESS_TOKEN_LIFETIME = timedelta(hours=env.int('JWT_ACCESS_TOKEN_LIFETIME'))
TOKEN_CLAIM_USER_ATTRIBUTE_MAP = {
	'user_id': 'id',
	'email': 'email',
	# 'is_active': 'is_active',
	# 'is_staff': 'is_staff',
	# 'is_superuser': 'is_superuser',
	# 'user_type': 'user_type',
	'last_login': 'last_login',
}
JWT_JTI = env('JWT_JTI')
JWT_ALGORITHM = env('JWT_ALGORITHM')
# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# mail settings
RESEND_API_KEY = env('RESEND_API_KEY')
FROM_EMAIL = env('RESEND_FROM_EMAIL', default='no-reply@femiir.dev')
REPLY_TO = env('REPLY_TO', default='feemiiir@gmail.com')


# CORS settings
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])
CORS_ALLOWED_ORIGIN_REGEXES = env.list('CORS_ALLOWED_ORIGIN_REGEXES')


# logging settings
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'simple': {
			'format': '{asctime} üêç [{levelname}] {message}',
			'style': '{',
			'datefmt': '%H:%M:%S',
		},
		'procrastinate': {
			'format': '{asctime} üîÑ [{levelname}] {message}',
			'style': '{',
			'datefmt': '%H:%M:%S',
		},
		'websocket': {
			'format': '{asctime} üîå [{levelname}] {message}',
			'style': '{',
			'datefmt': '%H:%M:%S',
		},
	},
	'handlers': {
		'console': {
			'class': 'logging.StreamHandler',
			'formatter': 'simple',
		},
		'procrastinate_console': {
			'level': 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'procrastinate',
		},
		'websocket_console': {
			'class': 'logging.StreamHandler',
			'formatter': 'websocket',
		},
	},
	'loggers': {
		'django': {
			'handlers': ['console'],
			'level': 'INFO',
			'propagate': False,
		},
		# Background Tasks
		'procrastinate': {
			'handlers': ['procrastinate_console'],
			'level': 'INFO',
			'propagate': False,
		},
		# WebSocket & Channels
		'channels': {
			'handlers': ['websocket_console'],
			'level': 'INFO',
			'propagate': False,
		},
		'notifications.consumers': {
			'handlers': ['websocket_console'],
			'level': 'DEBUG' if DEBUG else 'INFO',
			'propagate': False,
		},
		# Server & Infrastructure
		'daphne': {
			'handlers': ['console'],
			'level': 'WARNING',
			'propagate': False,
		},
		# 'twisted': {
		# 	'handlers': ['console'],
		# 	'level': 'ERROR',
		# 	'propagate': False,
		# },
	},
}

FRONTEND_URL = env('FRONTEND_URL')

# Twilio settings
TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = env('TWILIO_PHONE_NUMBER')


REDIS_URL = env('REDIS_URL')
REDIS_CACHE_URL = env('REDIS_CACHE_URL')
REDIS_SESSIONS_URL = env('REDIS_SESSIONS_URL')

# Channels settings
CHANNEL_LAYERS = {
	'default': {
		'BACKEND': 'channels_redis.core.RedisChannelLayer',
		'CONFIG': {
			'hosts': [REDIS_URL],
		},
	},
}


CACHES = {
	'default': {
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': REDIS_CACHE_URL,
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.DefaultClient',
			'CONNECTION_POOL_KWARGS': {
				'max_connections': 50,
				'retry_on_timeout': True,
				'socket_keepalive': True,
				'socket_keepalive_options': {},
			},
			'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
			'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
			'IGNORE_EXCEPTIONS': True,  # Don't break site if Redis is down
		},
		'KEY_PREFIX': 'django_cache',
		'VERSION': 1,
		'TIMEOUT': 3600,  # 1 hour
	},
	'sessions': {
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': REDIS_SESSIONS_URL,
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.DefaultClient',
			'CONNECTION_POOL_KWARGS': {
				'max_connections': 20,
				'retry_on_timeout': True,
				'socket_keepalive': True,
			},
			'IGNORE_EXCEPTIONS': True,
		},
		'KEY_PREFIX': 'session',
		'TIMEOUT': 1209600,  # 2 weeks
	},
	'user_state': {
		'BACKEND': 'django_redis.cache.RedisCache',
		'LOCATION': REDIS_URL,  # Same as channels for user state
		'OPTIONS': {
			'CLIENT_CLASS': 'django_redis.client.DefaultClient',
			'CONNECTION_POOL_KWARGS': {
				'max_connections': 30,
				'retry_on_timeout': True,
			},
		},
		'KEY_PREFIX': 'user_state',
		'TIMEOUT': 300,  # 5 minutes (for online status)
	},
}

# === Session Configuration (Production Ready) ===
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'  # Use dedicated sessions cache

# Session Security Settings
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_AGE = 1209600  # 2 weeks (in seconds)
SESSION_COOKIE_DOMAIN = None  # Use current domain
SESSION_COOKIE_SECURE = not DEBUG  # HTTPS only in production
SESSION_COOKIE_HTTPONLY = True  # No JavaScript access
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection

# Session Behavior
SESSION_SAVE_EVERY_REQUEST = False  # Only save when modified (performance)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Persist sessions
SESSION_COOKIE_PATH = '/'

# === Environment-Specific Overrides ===
if DEBUG:
	# Development settings
	SESSION_COOKIE_SECURE = False
	CACHES['default']['OPTIONS']['IGNORE_EXCEPTIONS'] = False
	SESSION_SAVE_EVERY_REQUEST = True  # More aggressive saving for dev
else:
	# Production settings
	SESSION_COOKIE_SECURE = True
	SESSION_COOKIE_DOMAIN = env('SESSION_COOKIE_DOMAIN', default=None)

	# Add session cleanup middleware for production
	MIDDLEWARE.insert(2, 'middlewares.session_cleanup.SessionCleanupMiddleware')
